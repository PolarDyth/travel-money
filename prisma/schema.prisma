// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Customer {
  id              Int     @id @default(autoincrement())
  firstNameEnc    String
  lastNameEnc     String
  postcodeEnc     String
  addressLine1Enc String
  cityEnc         String
  countryEnc      String
  emailEnc        String?
  phoneEnc        String?

  // Primary ID
  primaryIdTypeEnc       String?
  primaryIdNumberEnc     String?
  primaryIdIssueDateEnc  String?
  primaryIdExpiryDateEnc String?
  customerDOBEnc         String?

  // Secondary ID
  secondaryIdTypeEnc       String?
  secondaryIdNumberEnc     String?
  secondaryIdIssueDateEnc  String?
  secondaryIdExpiryDateEnc String?

  // Relations
  transactions Transaction[]

  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id        Int    @id @default(autoincrement())
  firstName String
  lastName  String
  email     String @unique
  username  String @unique
  password  String // Store as hash

  role      Role     @default(OPERATOR) // Default role is OPERATOR
  branch    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sessions         Session[]
  transactions     Transaction[]     @relation("OperatorTransactions")
  orders           Order[]           @relation("OperatorOrders")
  operatorMessages OperatorMessage[]

  @@index([username])
  @@index([email])
  @@index([branch])
  @@index([role])
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  token     String   @unique // JWT or session token
  expiresAt DateTime // Expiration date for the session
  createdAt DateTime @default(now())

  @@index([userId])
}

model Transaction {
  id Int @id @default(autoincrement())

  operatorId Int
  operator   User @relation("OperatorTransactions", fields: [operatorId], references: [id])

  // Relations
  customerId Int
  customer   Customer @relation(fields: [customerId], references: [id])

  // Currency details (one-to-many)
  currencyDetails CurrencyDetail[]

  // Verification
  paymentMethod String // Store as JSON string
  cashTendered  Decimal? @db.Decimal(10, 2)
  totalSterling Decimal? @db.Decimal(10, 2)
  totalSold     Decimal? @db.Decimal(10, 2)
  totalBought   Decimal? @db.Decimal(10, 2)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([operatorId])
  @@index([customerId])
}

model CurrencyDetail {
  id            Int          @id @default(autoincrement())
  transaction   Transaction? @relation(fields: [transactionId], references: [id])
  transactionId Int?

  currencyCode    String          @db.Char(3)
  currency        Currency        @relation(fields: [currencyCode], references: [code])
  sterlingAmount  Decimal         @db.Decimal(10, 2)
  foreignAmount   Decimal         @db.Decimal(10, 2)
  exchangeRate    Decimal         @db.Decimal(10, 6)
  transactionType TransactionType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([transactionId])
  @@index([currencyCode])
}

model ExchangeRate {
  id           BigInt   @id @default(autoincrement())
  currencyCode String   @db.Char(3)
  baseCode     String   @db.Char(3)
  rate         Decimal  @db.Decimal(18, 8)
  buyRate      Decimal  @db.Decimal(18, 8)
  sellRate     Decimal  @db.Decimal(18, 8)
  fetchedAt    DateTime @default(now()) // exact timestamp
  date         DateTime // just the date part for daily snapshots

  currency Currency @relation("FxRates", fields: [currencyCode], references: [code])

  @@unique([currencyCode, baseCode, date], name: "unique_daily_rate")
  @@index([fetchedAt])
}

model Currency {
  code            String           @id @db.Char(3)
  name            String
  symbol          String
  country         String?
  region          String?
  description     String?
  denominations   Int[]
  thresholdRules  Json?
  rates           ExchangeRate[]   @relation("FxRates")
  currencyDetails CurrencyDetail[]
  orderDetails    OrderItem[]
}

model Order {
  id          Int    @id @default(autoincrement())
  orderNumber String @unique // e.g. “ORD-20250423-0001”

  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int

  // Optionally track who processed/approved it
  operator   User? @relation("OperatorOrders", fields: [operatorId], references: [id])
  operatorId Int?

  // Totals
  totalSterling Decimal @db.Decimal(10, 2) // amount paid/owed in GBP
  totalForeign  Decimal @db.Decimal(10, 2) // sum of all foreign amounts
  totalFee      Decimal @db.Decimal(10, 2) // total service fee

  // Payment
  paymentMethod Json // e.g. {"type":"card","processor":"stripe",…}
  paidAt        DateTime?

  // Workflow
  status         OrderStatus @default(PENDING)
  collectionDate DateTime    @default(now())
  collectedAt    DateTime?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Line items
  items OrderItem[]

  @@index([customerId])
  @@index([operatorId])
  @@index([status])
  @@index([createdAt])
}

model OrderItem {
  id      Int   @id @default(autoincrement())
  order   Order @relation(fields: [orderId], references: [id])
  orderId Int

  currencyCode String   @db.Char(3)
  currency     Currency @relation(fields: [currencyCode], references: [code])

  sterlingAmount  Decimal         @db.Decimal(10, 2)
  foreignAmount   Decimal         @db.Decimal(10, 2)
  exchangeRate    Decimal         @db.Decimal(10, 6)
  transactionType TransactionType

  requestedDenoms RequestedDenomination[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
}

model RequestedDenomination {
  id          Int       @id @default(autoincrement())
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id])
  orderItemId Int

  // e.g. 20  for “€20”, 50 for “£50”
  denomination Int
  quantity     Int

  @@index([orderItemId])
}

model OperatorMessage {
  id        String   @id @default(cuid())
  userId    Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: NoAction)

  @@index([userId])
}

model ChatSession {
  id        String        @id @default(cuid())
  userId    Int?
  title     String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  messages  ChatMessage[]
}

model ChatMessage {
  id        String   @id @default(cuid())
  sessionId String
  role      ChatRole
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  session ChatSession @relation(fields: [sessionId], references: [id])

  @@index([sessionId])
}

enum Role {
  ADMIN
  OPERATOR
  AUDITOR
  MANAGER
}

enum TransactionType {
  BUY
  SELL
}

enum OrderStatus {
  PENDING
  IN_PREPARATION
  READY
  COLLECTED
  CANCELLED
}

enum ChatRole {
  USER
  ASSISTANT
}
